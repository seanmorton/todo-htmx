package templates

import (
  "fmt"
  "time"

  "github.com/seanmorton/todo-htmx/internal/domain"
  "github.com/seanmorton/todo-htmx/pkg"
)


func isPastDue(dueDate time.Time) bool {
  now := time.Now()
  nowDate := time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, time.UTC)
  return dueDate.Before(nowDate)
}

templ Tasks(tasks []domain.Task, projects []domain.Project, users []domain.User, params map[string]any) {
  <button id="taskNew" hx-get={ fmt.Sprintf("/tasks/new?projectId=%d", params["projectId"]) } hx-target="#taskForm">
  +
  </button>
  <form id="taskParams">
    <select name="projectId" autocomplete="off" hx-on:change="onTaskParamChange()">
      <option value="">All Projects</option>
      for _, project := range projects {
        <option value={ fmt.Sprintf("%d", project.Id) }
          selected?={ params["projectId"] != nil && params["projectId"] == project.Id }
        >{ project.Name }</option>
      }
    </select>
    <select name="assigneeId" autocomplete="off" hx-on:change="onTaskParamChange()">
      <option value="">All Assignees</option>
      for _, user := range users {
        <option value={ fmt.Sprintf("%d", user.Id) }
          selected?={ params["assigneeId"] != nil && params["assigneeId"] == user.Id }
        >{ user.Name }</option>
      }
    </select>
    <input type="checkbox" name="nextMonthOnly" id="nextMonthOnly" autocomplete="off" hx-on:change="onTaskParamChange()" checked></input>
    <label for="nextMonthOnly">Due next month</label>
    <input type="checkbox" name="completed" id="completed" autocomplete="off" hx-on:change="onTaskParamChange()"></input>
    <label for="completed">Completed</label>
  </form>

  <div id="taskList" hx-get="/tasks/rows" hx-trigger="taskChange from:body, taskParamChange from:#taskParams">
    @TaskRows(tasks)
  </div>

  <div id="taskForm"></div>

  <script>
    function onTaskParamChange() {
      const form = htmx.find("#taskParams");
      const projectId = htmx.find("#taskParams>select[name=projectId]").value;
      const assigneeId = htmx.find("#taskParams>select[name=assigneeId]").value;
      const completed = htmx.find("#taskParams>input[name=completed]").checked;
      const nextMonthOnly = htmx.find("#taskParams>input[name=nextMonthOnly]").checked;
      const params = { projectId, assigneeId, completed, nextMonthOnly };

      // Update query parms for list
      let queryPath = "/tasks/rows?";
      for (let [k, v] of Object.entries(params)) {
        if (v == false || v != "") {
          queryPath += `${k}=${v}&`
        }
      }
      const taskList = htmx.find("#taskList");
      taskList.setAttribute("hx-get", queryPath);
      htmx.process(taskList);

      // Prefill projectId on newTask form
      let newPath = "/tasks/new?";
      if (projectId != "") {
        newPath += `projectId=${projectId}&`
      }
      if (assigneeId != "") {
        newPath += `assigneeId=${assigneeId}&`
      }
      const taskNew = htmx.find("#taskNew");
      taskNew.setAttribute("hx-get", newPath);
      htmx.process(taskNew);

      form.dispatchEvent(new Event("taskParamChange"));
    }
  </script>
}

templ TaskRows(tasks []domain.Task) {
  for _, task := range tasks {
    <div>
      <div class="task-row">
        if !task.Done() {
          <button
            class="check-button"
            hx-post={ fmt.Sprintf("/tasks/%d/complete", task.Id) }
            hx-on::after-request="if (event.detail.successful) { this.parentElement.remove(); }"
          ></button>
        } else {
          <button
            hx-post={ fmt.Sprintf("/tasks/%d/incomplete", task.Id) }
            hx-on::after-request="if (event.detail.successful) { this.parentElement.remove(); }"
          >☑️</button>
        }
        <h5 hx-get={ fmt.Sprintf("/tasks/%d", task.Id) }  hx-target="#taskForm">{ task.Title }</h5>
      if task.CompletedAt != nil {
        <p style="margin-left: auto;">Completed: { pkg.DateStrShort(task.CompletedAt) }</p>
      } else if task.DueDate != nil {
        <p style="margin-left: auto;" class={ templ.KV("red-text", isPastDue(*task.DueDate)) }>{ pkg.DateStrShort(task.DueDate) }</p>
      }
      </div>
    </div>
  }
}

templ TaskForm(task domain.Task, projects []domain.Project, users []domain.User) {
  <div id="taskForm">
    <div class="overlay">
      <form
        if task.Id == 0 {
          hx-post="/tasks"
        } else {
          hx-put={ fmt.Sprintf("/tasks/%d", task.Id) }
        }
        hx-swap="none"
        hx-on::after-request="if (event.detail.successful) { document.getElementById('taskForm').innerHTML=''; }"
      >
        @TaskFields(task, task.GetRecurPolicy(), projects, users)
        <br />
        <button type="submit" disabled?={ task.Done() }>Save</button>
        <button hx-on:click="document.getElementById('taskForm').innerHTML='';">Close</button>
        <button
          hx-delete={ fmt.Sprintf("/tasks/%d", task.Id) }
          hx-confirm="Are you sure you want to delete this task?"
          hx-on::after-request="if (event.detail.successful) { document.getElementById('taskForm').innerHTML=''; }"
          class="red-text"
          style="float: right;"
        >Delete</button>
      </form>
    </div>
  </div>
}

templ TaskFields(task domain.Task, recurPolicy *domain.RecurPolicy, projects []domain.Project, users []domain.User) {
    <label>Title</label>
    <input type="text" name="title" value={ task.Title } autofocus required/>

    <label>Assignee</label>
    <select name="assigneeId">
      <option value=""></option>
      for _, user := range users {
        <option value={ fmt.Sprintf("%d", user.Id) }
          selected?={ task.AssigneeId != nil && *task.AssigneeId == user.Id }
        >{ user.Name }</option>
      }
    </select>

    <label>Project</label>
    <select name="projectId">
      for _, project := range projects {
        <option value={ fmt.Sprintf("%d", project.Id) }
          selected?={ task.ProjectId == project.Id }
        >{ project.Name }</option>
      }
    </select>

    <label>Description</label>
    <textarea rows="4" name="description">
      if task.Description != nil {
        { *task.Description }
      }
    </textarea>

    <label>DueDate</label>
    <input type="date" name="dueDate"
      if task.DueDate != nil {
        value={ pkg.DateStr(task.DueDate) }
      }
    />

    <label>Repeat?</label>
    <select name="recurPolicyType">
      <option value="">No Repeat</option>
      <option value={ domain.RPDaysAfterComplete }
        selected?={ recurPolicy != nil && recurPolicy.Type == domain.RPDaysAfterComplete }
      >Days After Completion</option>
      <option value={ domain.RPDayOfMonth }
        selected?={ recurPolicy != nil && recurPolicy.Type == domain.RPDayOfMonth }
      >Day of Month</option>
    </select>
    <input type="number" name="recurPolicyN" min="1"
      if recurPolicy != nil {
        value={ fmt.Sprintf("%d", recurPolicy.N) }
      }
    />
}
